{"version":3,"sources":["Components/InputOptions/InputOptions.js","Components/Post/Post.js","Firebase/Firebase.js","Components/Feed/Feed.js","Components/HeaderOption/HeaderOption.js","Components/Header/Header.js","Components/Sidebar/Sidebar.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["InputOptions","title","Icon","color","className","style","Post","name","description","message","photoUrl","Avatar","ThumbUpAltOutlinedIcon","ChatOutlinedIcon","ShareOutlinedIcon","SendOutlinedIcon","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","Feed","auth","useState","input","setInput","posts","setPosts","useEffect","collection","onSnapshot","snapshot","docs","map","doc","id","data","value","onChange","e","target","type","onClick","preventDefault","add","photUrl","timestamp","FieldValue","serverTimestamp","ImageIcon","SubscriptionsIcon","EventNoteIcon","CalendarViewDayIcon","HeaderOption","avtar","src","Header","alt","HomeIcon","SupervisorAccountIcon","BusinessCenterIcon","ChatIcon","NotificationsIcon","Sidebar","recentItem","topic","App","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","initialState","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e1fdcd35.chunk.js","sourcesContent":["import React from 'react'\r\nimport './InputOptions.css'\r\n\r\nconst InputOptions = ({ title, Icon, color }) => {\r\n    return (\r\n        <div className=\"inputOptions\">\r\n            <Icon style ={{ color }}/>\r\n            <h4>{title}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputOptions\r\n","import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport InputOptions from '../InputOptions/InputOptions'\r\nimport './Post.css'\r\nimport ThumbUpAltOutlinedIcon from '@material-ui/icons/ThumbUpAltOutlined';\r\nimport ChatOutlinedIcon from '@material-ui/icons/ChatOutlined';\r\nimport ShareOutlinedIcon from '@material-ui/icons/ShareOutlined';\r\nimport SendOutlinedIcon from '@material-ui/icons/SendOutlined';\r\nimport { useState } from 'react';\r\n\r\nconst Post = ({ name, description, message, photoUrl }) => {\r\n    return (\r\n        <div className=\"post\">\r\n            <div className=\"post__header\">\r\n                <Avatar/>\r\n                <div className=\"post__info\">\r\n                    <h2>{name}</h2>\r\n                    <p>{description}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"post__body\">\r\n                <p>{message}</p>\r\n            </div>\r\n            <div className=\"post__buttons\">\r\n                <InputOptions Icon={ThumbUpAltOutlinedIcon} title=\"Like\" color=\"gray\" />\r\n                <InputOptions Icon={ChatOutlinedIcon} title=\"Comment\" color=\"gray\" />\r\n                <InputOptions Icon={ShareOutlinedIcon} title=\"Share\" color=\"gray\" />\r\n                <InputOptions Icon={SendOutlinedIcon} title=\"Send\" color=\"gray\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import firebase  from 'firebase'\r\nimport 'firebase/firestore'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDOERPR96QAB3LmgT_scmFVYZLu_tikoKg\",\r\n    authDomain: \"linkedin-clone-c2f05.firebaseapp.com\",\r\n    projectId: \"linkedin-clone-c2f05\",\r\n    storageBucket: \"linkedin-clone-c2f05.appspot.com\",\r\n    messagingSenderId: \"795379624161\",\r\n    appId: \"1:795379624161:web:1a2e57cbc3c50c360dafa0\"\r\n  };\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth()\r\n\r\nexport {db, auth}","import React, { useState } from 'react'\r\nimport './Feed.css'\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport InputOptions from '../InputOptions/InputOptions';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport SubscriptionsIcon from '@material-ui/icons/Subscriptions';\r\nimport EventNoteIcon from '@material-ui/icons/EventNote';\r\nimport CalendarViewDayIcon from '@material-ui/icons/CalendarViewDay';\r\nimport Post from '../Post/Post';\r\nimport { useEffect } from 'react';\r\nimport { db } from '../../Firebase/Firebase';\r\nimport firebase from 'firebase'\r\n\r\nconst Feed = () => {\r\n\r\n    const [input, setInput] = useState(\"\")\r\n    const [posts, setPosts] = useState([])\r\n\r\n    useEffect(()=>{\r\n        db.collection('posts').onSnapshot(snapshot => (\r\n            setPosts(snapshot.docs.map(doc => (\r\n                {\r\n                    id: doc.id,\r\n                    data: doc.data(),\r\n                }\r\n            )))\r\n        ))\r\n    },[])\r\n\r\n    const sendPost = (e) => {\r\n        e.preventDefault();\r\n\r\n        db.collection('posts').add({\r\n            name: \"Kiran N Chavan\",\r\n            description: \"This is desc\",\r\n            message: input,\r\n            photUrl: '',\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        })\r\n        setInput(\"\")\r\n    }\r\n\r\n    return (\r\n        <div className=\"feet\">\r\n            <div className=\"feed__inputContainer\">\r\n                <div className=\"feed__input\">\r\n                    <CreateIcon/>\r\n                    <form>\r\n                        <input value={input} onChange={e => setInput(e.target.value)} type=\"text\" />\r\n                        <button onClick={sendPost} type=\"submit\">Send</button>\r\n                    </form>\r\n                </div>\r\n                <div className=\"feet__inputOptions\">\r\n                    <InputOptions title=\"Photo\" Icon={ImageIcon} color=\"#7085F9 \" />\r\n                    <InputOptions title=\"Video\" Icon={SubscriptionsIcon} color=\"#E7A33E \" />\r\n                    <InputOptions title=\"Event\" Icon={EventNoteIcon} color=\"#C0CBCD\" />\r\n                    <InputOptions title=\"Write Article\" Icon={CalendarViewDayIcon} color=\"#7FC15E \" />\r\n                </div>\r\n            </div>\r\n\r\n            {/* Posts  */}\r\n            {\r\n                posts?.map(({id, data: {name, description, message, photoUrl}}) => (\r\n                    <Post \r\n                        key={id}\r\n                        name={name}\r\n                        description={description}\r\n                        message={message}\r\n                        photoUrl={photoUrl}\r\n                    /> \r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Feed\r\n","import { Avatar, Icon } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './HeaderOption.css'\r\n\r\nconst HeaderOption = ({avtar, Icon, title}) => {\r\n    return (\r\n        <div className=\"headerOption\">\r\n            {\r\n                Icon &&\r\n                    <Icon className=\"headerOption__icon\" />\r\n            }\r\n            {\r\n                avtar && \r\n                    <Avatar className=\"headerOption__avtar\" src={avtar} />\r\n            }\r\n            <h3 className=\"headerOption__title\">{title}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeaderOption\r\n","import React from 'react'\r\nimport './Header.css'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport HeaderOption from '../HeaderOption/HeaderOption';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\r\nimport BusinessCenterIcon from '@material-ui/icons/BusinessCenter';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\n\r\nconst linkedinIcon = \"https://image.flaticon.com/icons/png/512/174/174857.png\"\r\nconst avtar = \"https://cdn4.iconfinder.com/data/icons/evil-icons-user-interface/64/avatar-512.png\"\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"header__left\">\r\n                <img src={linkedinIcon} alt=\"\"/>\r\n                <div className=\"header__search\">\r\n                    {/* SearchIcon  */}\r\n                    <SearchIcon/>\r\n                    <input type=\"text\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"header__right\">\r\n                <HeaderOption title=\"Home\" Icon={HomeIcon} />\r\n                <HeaderOption title=\"My Network\" Icon={SupervisorAccountIcon} />\r\n                <HeaderOption title=\"Jobs\" Icon={BusinessCenterIcon} />\r\n                <HeaderOption title=\"Messaging\" Icon={ChatIcon} />\r\n                <HeaderOption title=\"Notifications\" Icon={NotificationsIcon} />\r\n                <HeaderOption avtar={avtar} /> \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './Sidebar.css'\r\n\r\nconst image = \"https://images.unsplash.com/photo-1579546929662-711aa81148cf?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8Mnx8fGVufDB8fHx8&w=1000&q=80\"\r\n\r\nconst Sidebar = () => {\r\n\r\n    const recentItem = (topic) => (\r\n        <div className=\"sidebar__recentItem\">\r\n            <span className=\"sidebar_hash\">\r\n                #\r\n            </span>\r\n            <p>{topic}</p>\r\n        </div>\r\n    )\r\n    \r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__top\">\r\n                <img src={image} alt=\"\" />\r\n                <Avatar className=\"sidebar__avtar\" />\r\n                <h2>Kiran N Chavan</h2>\r\n                <h4>kiranchavankc112@gmail.com</h4>\r\n            </div>\r\n            <div className=\"sidebar__stats\">\r\n                <div className=\"sidebar__stat\">\r\n                    <p>who viewed you</p>\r\n                    <p className=\"sidebar__stat__count\">324234</p>\r\n                </div>\r\n                <div className=\"sidebar__stat\">\r\n                    <p>viewed on posts</p>\r\n                    <p className=\"sidebar__stat__count\">324234</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar__bottom\">\r\n                <p>Recent</p>\r\n                {recentItem('reactjs')}\r\n                {recentItem('java')}\r\n                {recentItem('angular')}\r\n                {recentItem('design')}\r\n                {recentItem('reactjs')}\r\n                {recentItem('reactjs')}\r\n            </div>\r\n        </div>      \r\n    )\r\n}\r\n\r\nexport default Sidebar","import React from 'react';\r\nimport './App.css';\r\nimport Feed from './Components/Feed/Feed';\r\nimport Header from './Components/Header/Header';\r\nimport Sidebar from './Components/Sidebar/Sidebar';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n\r\n      {/* Header  */}\r\n      <Header/>\r\n\r\n      {/* App Body  */}\r\n      <div className=\"app_body\">\r\n\r\n        {/* Sidebar  */}\r\n        <Sidebar/>\r\n\r\n        {/* Feed  */}\r\n        <Feed />\r\n        {/* Widgets  */}\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// A mock function to mimic making an async request for data\r\nexport function fetchCount(amount = 1) {\r\n  return new Promise((resolve) =>\r\n    setTimeout(() => resolve({ data: amount }), 500)\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchCount } from './counterAPI';\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  status: 'idle',\r\n};\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const incrementAsync = createAsyncThunk(\r\n  'counter/fetchCount',\r\n  async (amount) => {\r\n    const response = await fetchCount(amount);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state) => state.counter.value;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n  const currentValue = selectCount(getState());\r\n  if (currentValue % 2 === 1) {\r\n    dispatch(incrementByAmount(amount));\r\n  }\r\n};\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}